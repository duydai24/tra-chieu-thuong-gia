import {Editor} from '@tinymce/tinymce-react';
import {getRealImageUrl} from 'core/getRealImageUrl';
import {uploadFile} from 'core/uploadFile';
import Button from 'lib/Button';
import Modal from 'lib/Containers/Modal';
import ToastRoot from 'lib/ToastRoot';
import {useState} from 'react';
import {FaEdit} from 'react-icons/fa';
import {MdArrowBack} from 'react-icons/md';

import {ContentViewer} from './ContentViewer';

function ContentEditor({value, onChange, label, name, className, extra}) {
  const [isEdit, setEdit] = useState(0);
  const [_changed, setChanged] = useState('');
  const [q, setQ] = useState(false);
  const toggleQuestion = () => {
    setQ(q => !q);
  };
  const toggleEdit = () => {
    setEdit(!isEdit);
  };

  const onSave = () => {
    toggleQuestion();
    if (!onChange) return;

    if (value !== _changed) {
      if (extra || extra === 0 || extra === '0')
        onChange(extra, name, _changed);
      else
        onChange(name, _changed);
    }
  };
  const closeEdit = () => {
    if (_changed === value || _changed?.length === 0) {
      toggleEdit();
    }
    else {
      if (!q) toggleQuestion();
    }
  };

  const handleEditorChange = (content) => {
    setChanged(content);
  };

  const cleanHTML = (input) => {

    // 1. remove line breaks / Mso classes
    const stringStripper = /(\n|\r| class=(")?Mso[a-zA-Z]+(")?)/g;
    let output = input.replace(stringStripper, ' ');

    // 2. strip Word generated HTML comments
    const commentSripper = new RegExp('<!--(.*?)-->', 'g');
    output = output.replace(commentSripper, '');

    // 3. remove tags leave content if any
    const tagStripper = new RegExp('<(/)*(title|meta|link|span|\\?xml:|st1:|o:|font)(.*?)>', 'gi');
    output = output.replace(tagStripper, '');

    // 4. Remove everything in between and including tags '<style(.)style(.)>'
    const badTags = ['style', 'script', 'applet', 'embed', 'noframes', 'noscript'];

    for (let i = 0; i < badTags.length; i++) {
      let tagStripper = new RegExp('<' + badTags[i] + '.*?' + badTags[i] + '(.*?)>', 'gi');
      output = output.replace(tagStripper, '');
    }

    // A different attempt
    output = (output).replace(/font-family:[^;]+;?|line-height:[^;]+;?/g, '');

    // 5. remove attributes ' style="..."'
    var badAttributes = ['start', 'align'];
    for (let i = 0; i < badAttributes.length; i++) {
      var attributeStripper = new RegExp(' ' + badAttributes[i] + '="(.*?)"', 'gi');
      output = output.replace(attributeStripper, '');
    }

    return output;
  };

  const displayData = _changed || value || '';
  return <div className={'my-2 flex-1 flex flex-col overflow-y-hidden ' + (className || '')} spellCheck="false">
    <div className={'flex justify-between mb-2'}>
      <p className="text-white">{label}</p>
      <div className="flex justify-end gap-1">
        {isEdit ? <Button disabled={!isEdit} onClick={closeEdit}>
          <MdArrowBack />
        </Button> : <Button
          onClick={toggleEdit} disabled={!!isEdit}>
          <FaEdit />
        </Button>}
      </div>
    </div>
    <Modal visible={q} title="Nội dung đã thay đổi , bạn có muốn lưu không" confirmText="Lưu thay đổi" cancelText="Để xem đã" onCancel={() => {
      toggleEdit();
      toggleQuestion();
      setChanged('');
    }} onAccept={onSave}>

    </Modal>
    {!isEdit ? <ContentViewer html={displayData} className="flex-1 flex flex-col overflow-y-auto" />
      : <div>
        <Editor apiKey='vrb2nacbahm2naunre9jlz3ygc3gl8eovn9da24vey5bi80l'
          initialValue={value ? value : '<p>Nội dung</p>'} init={{
            height: '100vh',
            file_picker_types: 'file image media',
            image_uploadtab: true,
            images_upload_handler: function (blobInfo, success, failure) {

              uploadFile(blobInfo.blob())
                .then(data => {
                  if (data.message) {
                    ToastRoot.showError(data.message);
                    failure(data.message);
                  }
                  else
                    success(getRealImageUrl(data));
                })
                .catch(err => {
                  ToastRoot.show(err);
                  failure(err);
                });

            },
            paste_data_images: true,
            // paste_word_valid_elements: 'b,strong,i,em,h1,h2,u,p,ol,ul,li,a[href],span,color,font-size,font-color,font-family,mark,table,tr,td',
            // paste_retain_style_properties: 'all',
            paste_postprocess: function (plugin, args) {
              args.node.innerHTML = cleanHTML(args.node.innerHTML);
            },
            table_default_styles: {
              'border-collapsed': 'collapse',
              'width': '100%'
            },
            branding: false,
            autoresize_bottom_margin: 50,
            // image_advtab: true,
            toolbar_mode: 'sliding',
            fontsize_formats: '10px 12px 14px 18px 20px 24px',
            // table_responsive_width: true,
            tinycomments_mode: 'embedded',
            tinycomments_author: 'Author',
            formats: {
              removeformat: [
                {
                  selector: 'b,strong,em,i,font,u,strike,s,sub,sup,dfn,code,samp,kbd,var,cite,mark,q,del,ins,small',
                  remove: 'all',
                  split: true,
                  block_expand: true,
                  expand: false,
                  deep: true
                },
                {selector: 'span', attributes: ['style', 'class'], remove: 'empty', split: true, expand: false, deep: true},
                {selector: '*', attributes: ['style', 'class'], split: false, expand: false, deep: true}
              ]
            },
            plugins: [
              // 'advcode tinycomments',
              // 'autoresize',
              'code emoticons advlist autolink lists link image charmap print preview anchor tabfocus ',
              'searchreplace visualblocks code fullscreen',
              'table paste imagetools',
              // 'powerpaste',
              'media table paste code help wordcount'],
            toolbar: 'preview| undo redo |code |image emoticons|fontsizeselect formatselect bold italic backcolor forecolor blockquote | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help'
          }}
          onEditorChange={handleEditorChange} />

      </div>}

  </div>;
}
export default (ContentEditor);